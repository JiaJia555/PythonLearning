# 1. __getattr__魔法方法
# 1.1 什么时候用__getattr__?当属性查找不到的时候用
from datetime import date


class User:
    def __init__(self, name, birthday, info={}):
        self.name = name
        self.birthday = birthday
        # print(self.birthday)
        self.info = info

    # 在查找不到属性的时候调用
    def __getattr__(self, item):
        # print(item, "attribute not found")
        # print(item)    # age
        # return "attribute not found"        # 不想输出None,可以将函数改成return
        return self.info[item]                # 用字典的键取值
        # return self.info.get(item)          # dict.get(key, default=None)
    # __getattribute__在__getattr__之前执行

    # def __getattribute__(self, item):
        # return "jia+"


if __name__ =="__main__":
    # 1996-12-10
    user = User('jiajia', date(year=1996, month=12, day=10), info={'age': 18})
    print(user.name)
    # 用__getattr__之前，AttributeError: 'User' object has no attribute 'age'
    print(user.age)        # 打印一个没有返回值的函数，默认输出None
    # print(user.gender)   # KeyError: 'gender'

# 1.2 info{}添加新属性
# print(user.age)返回18
# 这个时候输入新的属性还是会报错，字典的报错KeyError: 'gender'
# 如果不想要报错，return self.info.get(item) 返回None

# 1.3 __getattribute__魔法函数
# 先执行这个函数返回 jia+


# 2. 属性描述符


# class User(object):
#     def __init__(self, age, name):
#         self.age = age
#         self.name = name
#
#     def get_age(self):
#         return self.age
#
#     def set_age(self, age):
#         if not isinstance(age, int):
#             raise TypeError('type error')
#         self.age = age
# 2.1 这个方法是对age一个属性进行验证，如果有多个属性要怎么验证?怎么复用此类方法
# 属性描述符 __get__, __set__, __delete__,统一验证int, str这种类型
# 和Django比较类似
# 下面案例是数据描述符，只要是整数类型的都可以这样做，如果是str类型类似的命名一个str类

class IntField(object):
    """
    数据描述符
    """
    def __get__(self, instance, owner):  # instance 都是类User的一个对象
        print("__get__")
        return self.values

    def __set__(self, instance, value):
        print("__set__")
        # print(instance)    # <__main__.User object at 0x000000089C5FE3C8>
        # print(value)       # 30
        if not isinstance(value, int):
            raise ValueError('Value Error')
        self.values = value

    def __delete__(self, instance):
        pass


class User:
    # age = IntField()
    age = 9


user = User()
# 2.再找user__dict__
# user.__dict__['age'] = 18
# 1.先调用数据描述符的age
user.age = 30          # 赋值之后打印set,
# user.age = "20"      # value Error
print(user.age)        # 打印调用get方法

'''
属性查找顺序

user = User(), 那么user.age 顺序如下:

1 如果"age"是出现在User或其基类的__dict__中, 且age是data descriptor,那么调用其__get__方法, 否则

2 如果"age"出现在user的__dict__中, 那么直接返回 obj.__dict__['age'],否则

3 如果"age"出现在User或其基类的__dict__中

3.1 如果age是non-data descriptor,那么调用其__get__方法， 否则

3.2 返回 __dict__['age']

4 如果User有__getattribute__和__getattr__, 先调用__getattribute__，再调用__getattr__方法，否则

5 抛出AttributeError
'''

# 2.2 非数据描述符,一般不用__set__, 但是也可以用
class NoneDataIntField:
    def __get__(self, instance, owner):
        print('get is called')
        return self.value

    def __set__(self, instance, value):
        print('set is called')
        self.value = value


class D(object):
    name = NoneDataIntField()


d1 = D()
print("给对象d1设置name属性的值")
d1.name = "ddl"                                      # set is called
print("实例数据覆盖了非数据描述符, 不会调用__get__")
print(d1.name)                                       # get is called, ddl


# 3.自定义元类
# 3.1 动态创建类


def create_class(name):
    if name == 'user':
        class User(object):
            def __str__(self):
                return "user"
        return User
    elif name == 'student':
        class Student:
            def __str__(self):
                return "student"
        return Student


if __name__ == '__main__':
    myclass = create_class('user')
    obj = myclass()
    print(obj)                # user
    print(type(obj))          # <class '__main__.create_class.<locals>.User'>

# 3.2 使用type创建类
# type源码有两种功能
# type(object) -> the object's type        查看数据类型
# type(name, bases, dict) -> a new type    创建新类, type(类名,由父类组成的元组,包含属性的字典)

Greeks = type("Greeks", (), {})
alpha = Greeks()
print(alpha)     # <__main__.Greeks object at 0x0000009F452DE5C8>

# type 和正常创建类的结果是一样的
class Fruits:
    pass
apple = Fruits()
print(apple)      # <__main__.Fruits object at 0x000000B8EFCCE848>

# 3.2.1 添加属性
User = type("User", (), {'name': "jiajia"})
obj = User()
print(obj)
print(obj.name)   # jiajia

# 3.2.2 添加方法
def demo(self):
    return self.name


def get_age(self):
    self.age = 18
    return self.age


#  添加魔法方法, 不适用
def __init__(self):
    self.sex = 1


User = type("User", (), {'name': "jiajia", 'info': demo, "age": get_age, "sex": __init__})
obj = User()
print(obj.info())   # jiajia
print(obj.age())    # 18
print(obj.sex())    # None, 魔法方法没有返回


# 3.2.3 继承父类,可继承多个类
class BaseClass(object):
    def test(self):
        return 'base class'

class BaseClass1(object):
    def test1(self):
        return 'base class1'


User = type("User", (BaseClass, BaseClass1,), {'name': "jiajia"})
user = User()
print(user.test())    # base class
print(user.test1())   # base class1

# 魔法方法可继承吗？
# 可以
class B1(object):
    def __str__(self):
        return '魔法方法可继承'

class C1(B1):
    pass

x = C1()
print(x)  # 魔法方法可继承


















